from binary_heap import BHeap
import datetime
import math
import environment as env
import pprint
from agent import Agent
from cell import Cell
# import pdb
pp = pprint.PrettyPrinter()

infinity = 1000000 

def print_grid(grid):

	matrix = [['x' for i in range(len(grid[0]))] for j in range(len(grid[0]))]
	for i in range(10):
		for j in range(10):
			matrix[i][j] = grid[i][j].status

	pp.pprint(matrix)

def heuristic(a,b):
	''' Define your heuristic here. You can choose the Manhattan Distance as a starting point'''

def get_neighbors(cell,grid):
	''' Use this to retrieve all unblocked neighbors '''
	
def in_closed_list(closed_list,cell):
	for item in closed_list:
		if cell.equals(item):
			return True

	return False


def init_grid(grid,goal):	
	''' Initialize the grid '''

def reconstruct_path(came_from,current,size):
	''' Use this to reconstruct the path generated by your search'''

def a_star(start,goal,grid):
	''' Implement A* here '''
	
def compute_path(agent,goal,Tie_val,counter,expanded_states):
	''' Compute the path from the current state to the goal '''	


